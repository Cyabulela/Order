/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.viresh.presentation;

import com.viresh.data.dto.OrderDto;
import com.viresh.domain.model.Chips;
import com.viresh.domain.model.Fish;
import com.viresh.domain.repository.PaymentService;
import com.viresh.util.InsufficientAmountException;
import com.viresh.util.IntegerTextField;
import com.viresh.util.NumericTextField;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Cyabulela Shabalala
 */
public class CashRegister extends javax.swing.JFrame {

    /**
     * Creates new form CashRegister
     */
    
    private static PaymentService paymentService;
    
    public CashRegister(PaymentService paymentService) {
        CashRegister.paymentService = paymentService;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        chipsL = new javax.swing.JLabel();
        chipsComboBox = new javax.swing.JComboBox<>();
        chipsQuantityL = new javax.swing.JLabel();
        chipsQuantity = new IntegerTextField();
        fishL = new javax.swing.JLabel();
        fishComboBox = new javax.swing.JComboBox<>();
        fishQuantityL = new javax.swing.JLabel();
        fishQuantity = new IntegerTextField();
        hasColdDrink = new javax.swing.JCheckBox();
        coldDrinkQualityL = new javax.swing.JLabel();
        coldDrinkQuantity = new IntegerTextField();
        hasRolls = new javax.swing.JCheckBox();
        rollsQuantityL = new javax.swing.JLabel();
        rollsQuantity = new IntegerTextField();
        totalCostLabel = new javax.swing.JLabel();
        totalCost = new javax.swing.JTextField();
        paidAmtL = new javax.swing.JLabel();
        paidAmt = new NumericTextField();
        changeL = new javax.swing.JLabel();
        change = new javax.swing.JTextField();
        processButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.SystemColor.controlShadow);

        title.setFont(new java.awt.Font("Algerian", 1, 16)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Fish and Chips Tuck shop");

        chipsL.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        chipsL.setText("Chips");

        chipsComboBox.setModel(new DefaultComboBoxModel(Chips.values()));
        chipsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chipsComboBoxActionPerformed(evt);
            }
        });

        chipsQuantityL.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        chipsQuantityL.setText("Qty");

        fishL.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        fishL.setText("Fish");

        fishComboBox.setModel(new DefaultComboBoxModel(Fish.values()));
        fishComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fishComboBoxActionPerformed(evt);
            }
        });

        fishQuantityL.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        fishQuantityL.setText("Qty");

        hasColdDrink.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        hasColdDrink.setText("Cold drink");
        hasColdDrink.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hasColdDrinkItemStateChanged(evt);
            }
        });

        coldDrinkQualityL.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        coldDrinkQualityL.setText("Qty");

        hasRolls.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        hasRolls.setText("Rolls");
        hasRolls.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hasRollsItemStateChanged(evt);
            }
        });

        rollsQuantityL.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        rollsQuantityL.setText("Qty");

        totalCostLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        totalCostLabel.setText("Total Amt");

        totalCost.setEditable(false);
        totalCost.setText("0.00");

        paidAmtL.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        paidAmtL.setText("Paid Amt");

        changeL.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        changeL.setText("Change");

        change.setEditable(false);

        processButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 3, 12)); // NOI18N
        processButton.setText("Process");
        processButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(processButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 57, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fishQuantityL)
                        .addGap(50, 50, 50)
                        .addComponent(fishQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rollsQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chipsL, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chipsQuantityL)
                                    .addComponent(fishL))
                                .addGap(18, 18, 18)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(chipsComboBox, 0, 118, Short.MAX_VALUE)
                                    .addComponent(chipsQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fishComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(hasRolls)
                                    .addComponent(hasColdDrink)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(coldDrinkQualityL)
                                        .addGap(38, 38, 38)
                                        .addComponent(coldDrinkQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(rollsQuantityL))
                                .addGap(3, 3, 3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(paidAmtL)
                                    .addComponent(changeL)
                                    .addComponent(totalCostLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(totalCost, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                    .addComponent(paidAmt)
                                    .addComponent(change))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(21, 21, 21))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chipsL)
                    .addComponent(chipsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hasColdDrink))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chipsQuantityL)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chipsQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(coldDrinkQualityL)
                        .addComponent(coldDrinkQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fishL)
                    .addComponent(fishComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hasRolls))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fishQuantityL, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fishQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rollsQuantityL)
                    .addComponent(rollsQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalCostLabel)
                    .addComponent(totalCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paidAmtL)
                    .addComponent(paidAmt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeL)
                    .addComponent(change, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(processButton)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        // TODO add your handling code here:
        String amountPaidInString = paidAmt.getText();
            String totalCostInString = totalCost.getText();
            if(amountPaidInString == null || amountPaidInString.isBlank()) {
                showMessage(CashRegister.MessageType.Error , "Please insert amount paid");
                return;
            }
            try {
                if(totalCostInString.contains(",")) {
                    totalCostInString = totalCostInString.replace(',', '.');
                }
                double amountPaid1 = Double.parseDouble(amountPaidInString);
                double totalCost1 = Double.parseDouble(totalCostInString);
                double changeCalc = paymentService.processPayment(totalCost1, amountPaid1);
                change.setText(String.format("%.2f", changeCalc));
            }catch (InsufficientAmountException error) {
                showMessage(CashRegister.MessageType.Warning , error.getLocalizedMessage());
            }catch (NumberFormatException error) {
                showMessage(CashRegister.MessageType.Error , error.getLocalizedMessage());
            }
    }//GEN-LAST:event_processButtonActionPerformed

    private void chipsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chipsComboBoxActionPerformed
        // TODO add your handling code here:
        calculateTotalCost();
    }//GEN-LAST:event_chipsComboBoxActionPerformed

    private void hasColdDrinkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hasColdDrinkItemStateChanged
        // TODO add your handling code here:
        calculateTotalCost();
    }//GEN-LAST:event_hasColdDrinkItemStateChanged

    private void fishComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fishComboBoxActionPerformed
        // TODO add your handling code here:
        calculateTotalCost();
    }//GEN-LAST:event_fishComboBoxActionPerformed

    private void hasRollsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hasRollsItemStateChanged
        // TODO add your handling code here:
        calculateTotalCost();
    }//GEN-LAST:event_hasRollsItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField change;
    private javax.swing.JLabel changeL;
    private static javax.swing.JComboBox<String> chipsComboBox;
    private javax.swing.JLabel chipsL;
    private static javax.swing.JTextField chipsQuantity;
    private javax.swing.JLabel chipsQuantityL;
    private javax.swing.JLabel coldDrinkQualityL;
    private static javax.swing.JTextField coldDrinkQuantity;
    private static javax.swing.JComboBox<String> fishComboBox;
    private javax.swing.JLabel fishL;
    private static javax.swing.JTextField fishQuantity;
    private javax.swing.JLabel fishQuantityL;
    private static javax.swing.JCheckBox hasColdDrink;
    private static javax.swing.JCheckBox hasRolls;
    private javax.swing.JPanel mainPanel;
    private static javax.swing.JTextField paidAmt;
    private javax.swing.JLabel paidAmtL;
    private javax.swing.JButton processButton;
    private static javax.swing.JTextField rollsQuantity;
    private javax.swing.JLabel rollsQuantityL;
    private javax.swing.JLabel title;
    private static javax.swing.JTextField totalCost;
    private javax.swing.JLabel totalCostLabel;
    // End of variables declaration//GEN-END:variables
    
    public static void showMessage(MessageType type , String message) {
        switch(type){
        case Error -> JOptionPane.showMessageDialog(null, message , null, JOptionPane.ERROR_MESSAGE);
        case Warning -> JOptionPane.showMessageDialog(null, message , null, JOptionPane.WARNING_MESSAGE);
        }
    }

    public static void calculateTotalCost() {
        Fish fishType = (Fish) fishComboBox.getSelectedItem();
        Chips chipsSize = (Chips) chipsComboBox.getSelectedItem();
        boolean hasDrink = hasColdDrink.isSelected();
        boolean hasRoll = hasRolls.isSelected();
        String chipsText = chipsQuantity.getText();
        String fishText = fishQuantity.getText();
        String drinkText = coldDrinkQuantity.getText();
        String rollsText = rollsQuantity.getText();

        OrderDto orderDto = new OrderDto(
            fishType,
            chipsSize,
            stringConverter(fishText),
            stringConverter(chipsText),
            stringConverter(drinkText),
            stringConverter(rollsText),
            hasDrink,
            hasRoll
        );

        double totalCostCalc = paymentService.getTotalCost(orderDto.toOrder());

        totalCost.setText(String.format("%.2f", totalCostCalc));
    }

    private static int stringConverter(String text) {
        if(text == null || text.isBlank()) {
                return 0;
        }
        return Integer.parseInt(text);
    }

    public static enum MessageType{
        Error, Warning
    }
    
}
